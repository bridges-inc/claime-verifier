// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resource created 1`] = `
Object {
  "Outputs": Object {
    "RestApiEndpoint0551178A": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "RestApi0C43BF4B",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "[HASH REMOVED]",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
    "[HASH REMOVED]": Object {
      "Description": "[HASH REMOVED]",
      "Type": "String",
    },
  },
  "Resources": Object {
    "EcsServiceTaskRoleB376410D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "claime-verifier-ecs-service-task-role-test",
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsServiceTaskRoleDefaultPolicy5A72B729": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:Put*",
                "dynamodb:Get*",
                "dynamodb:Scan*",
                "dynamodb:Delete*",
                "dynamodb:Batch*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/claime-verifier-main-test*",
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:Get*",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/claime-verifier*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EcsServiceTaskRoleDefaultPolicy5A72B729",
        "Roles": Array [
          Object {
            "Ref": "EcsServiceTaskRoleB376410D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EcsTaskExecutionRoleC0B6A84D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
        "RoleName": "claime-verifier-ecs-execution-role-test",
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsTaskExecutionRoleDefaultPolicyDCEEFDC3": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/aws-cdk/assets",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ServiceLogGroup63E10E16",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EcsTaskExecutionRoleDefaultPolicyDCEEFDC3",
        "Roles": Array [
          Object {
            "Ref": "EcsTaskExecutionRoleC0B6A84D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "FargateServiceAC2B3B85": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "claimecluster6EDD09C9",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "FargateServiceSecurityGroup0A0E79CB",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "vpcPrivate1Subnet1SubnetA320C03E",
              },
              Object {
                "Ref": "vpcPrivate1Subnet2Subnet999949B0",
              },
              Object {
                "Ref": "vpcPrivate2Subnet1Subnet9C3EFEE9",
              },
              Object {
                "Ref": "vpcPrivate2Subnet2SubnetE06DCAB9",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "ServiceTaskDefinitionEFF764B2",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "FargateServiceSecurityGroup0A0E79CB": Object {
      "Properties": Object {
        "GroupDescription": "test/FargateService/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "RestApi0C43BF4B": Object {
      "Properties": Object {
        "ApiKeySourceType": "HEADER",
        "Name": "claime-verifier-restapi-test",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "RestApiAccount7C83CF5A": Object {
      "DependsOn": Array [
        "RestApi0C43BF4B",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "RestApiCloudWatchRoleE3ED6605",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "RestApiCloudWatchRoleE3ED6605": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "[HASH REMOVED]": Object {
      "DependsOn": Array [
        "RestApiPOSTEF2EB351",
        "validator61463DE6",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "RestApi0C43BF4B",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "[HASH REMOVED]": Object {
      "Properties": Object {
        "DeploymentId": Object {
          "Ref": "[HASH REMOVED]",
        },
        "RestApiId": Object {
          "Ref": "RestApi0C43BF4B",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "RestApiPOSTApiPermissionTesttestRestApi41EB688DPOST7654BF68": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "discordE3A798ED",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "RestApi0C43BF4B",
              },
              "/test-invoke-stage/POST/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "RestApiPOSTApiPermissiontestRestApi41EB688DPOSTC600A146": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "discordE3A798ED",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "RestApi0C43BF4B",
              },
              "/",
              Object {
                "Ref": "[HASH REMOVED]",
              },
              "/POST/",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "RestApiPOSTEF2EB351": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": Array [
            Object {
              "StatusCode": "200",
            },
            Object {
              "ResponseTemplates": Object {
                "application/json": "invalid request signature",
              },
              "SelectionPattern": ".*[UNAUTHORIZED].*",
              "StatusCode": "401",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{
          "timestamp": "$input.params('x-signature-timestamp')",
          "signature": "$input.params('x-signature-ed25519')",
          "jsonBody" : $input.json('$')
        }",
          },
          "Type": "AWS",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "discordE3A798ED",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": Array [
          Object {
            "StatusCode": "200",
          },
          Object {
            "StatusCode": "401",
          },
        ],
        "RequestValidatorId": Object {
          "Ref": "validator61463DE6",
        },
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "RestApi0C43BF4B",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "RestApi0C43BF4B",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ServiceLogGroup63E10E16": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": "/aws/ecs/claime-clustertest",
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "ServiceTaskDefinitionEFF764B2": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 256,
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ".dkr.ecr.",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ".",
                  Object {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/aws-cdk/[HASH REMOVED]",
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "ServiceLogGroup63E10E16",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "claime",
              },
            },
            "Memory": 1024,
            "Name": "ContainerDef",
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "EcsTaskExecutionRoleC0B6A84D",
            "Arn",
          ],
        },
        "Family": "testServiceTaskDefinitionE16680A7",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "EcsServiceTaskRoleB376410D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "claimecluster5E016387": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "claimecluster6EDD09C9",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "claimecluster6EDD09C9": Object {
      "Properties": Object {
        "ClusterName": "claime-verifier-cluster-test",
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "claimeverifierdiscordapikeytest75609FE8": Object {
      "Properties": Object {
        "GenerateSecretString": Object {},
      },
      "Type": "AWS::SecretsManager::Secret",
    },
    "discordE3A798ED": Object {
      "DependsOn": Array [
        "discordServiceRoleDefaultPolicyE970AC2D",
        "discordServiceRole5137BD59",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "[HASH REMOVED]",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "[HASH REMOVED]",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Environment": Object {
          "Variables": Object {
            "EnvironmentId": "test",
          },
        },
        "FunctionName": "claime-verifier-discord-test",
        "Handler": "bin/main",
        "Role": Object {
          "Fn::GetAtt": Array [
            "discordServiceRole5137BD59",
            "Arn",
          ],
        },
        "Runtime": "go1.x",
        "Timeout": 60,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "discordServiceRole5137BD59": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "discordServiceRoleDefaultPolicyE970AC2D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "dynamodb:Put*",
                "dynamodb:Get*",
                "dynamodb:Scan*",
                "dynamodb:Delete*",
                "dynamodb:Batch*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:dynamodb:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":table/claime-verifier-main-test*",
                  ],
                ],
              },
            },
            Object {
              "Action": "ssm:Get*",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/claime-verifier*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "claimeverifierdiscordapikeytest75609FE8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "discordServiceRoleDefaultPolicyE970AC2D",
        "Roles": Array [
          Object {
            "Ref": "discordServiceRole5137BD59",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "validator61463DE6": Object {
      "Properties": Object {
        "RestApiId": Object {
          "Ref": "RestApi0C43BF4B",
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
      },
      "Type": "AWS::ApiGateway::RequestValidator",
    },
    "vpcA2121C38": Object {
      "Properties": Object {
        "CidrBlock": "192.156.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "vpcIGWE57CBDCA": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "vpcPrivate1Subnet1DefaultRoute0034859A": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "vpcPublic1Subnet1NATGateway5655F890",
        },
        "RouteTableId": Object {
          "Ref": "vpcPrivate1Subnet1RouteTableDE3FF464",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPrivate1Subnet1RouteTableAssociation8B4F5C60": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPrivate1Subnet1RouteTableDE3FF464",
        },
        "SubnetId": Object {
          "Ref": "vpcPrivate1Subnet1SubnetA320C03E",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPrivate1Subnet1RouteTableDE3FF464": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private1Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPrivate1Subnet1SubnetA320C03E": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.4.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private1",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private1Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPrivate1Subnet2DefaultRoute051767EC": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "vpcPublic1Subnet1NATGateway5655F890",
        },
        "RouteTableId": Object {
          "Ref": "vpcPrivate1Subnet2RouteTable4CD8281F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPrivate1Subnet2RouteTable4CD8281F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private1Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPrivate1Subnet2RouteTableAssociationCE7F136C": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPrivate1Subnet2RouteTable4CD8281F",
        },
        "SubnetId": Object {
          "Ref": "vpcPrivate1Subnet2Subnet999949B0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPrivate1Subnet2Subnet999949B0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.5.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private1",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private1Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPrivate2Subnet1DefaultRouteCC9D99FA": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "vpcPublic1Subnet1NATGateway5655F890",
        },
        "RouteTableId": Object {
          "Ref": "vpcPrivate2Subnet1RouteTable0AD2DE3C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPrivate2Subnet1RouteTable0AD2DE3C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private2Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPrivate2Subnet1RouteTableAssociationF4A6448D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPrivate2Subnet1RouteTable0AD2DE3C",
        },
        "SubnetId": Object {
          "Ref": "vpcPrivate2Subnet1Subnet9C3EFEE9",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPrivate2Subnet1Subnet9C3EFEE9": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.6.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private2",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private2Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPrivate2Subnet2DefaultRoute25965871": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": Object {
          "Ref": "vpcPublic1Subnet1NATGateway5655F890",
        },
        "RouteTableId": Object {
          "Ref": "vpcPrivate2Subnet2RouteTable8064691F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPrivate2Subnet2RouteTable8064691F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private2Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPrivate2Subnet2RouteTableAssociationBA224593": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPrivate2Subnet2RouteTable8064691F",
        },
        "SubnetId": Object {
          "Ref": "vpcPrivate2Subnet2SubnetE06DCAB9",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPrivate2Subnet2SubnetE06DCAB9": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.7.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private2",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Private2Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPublic1Subnet1DefaultRouteBD8F06B9": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcPublic1Subnet1RouteTable7C14485F",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPublic1Subnet1EIP69BE5B90": Object {
      "Properties": Object {
        "Domain": "vpc",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "vpcPublic1Subnet1NATGateway5655F890": Object {
      "Properties": Object {
        "AllocationId": Object {
          "Fn::GetAtt": Array [
            "vpcPublic1Subnet1EIP69BE5B90",
            "AllocationId",
          ],
        },
        "SubnetId": Object {
          "Ref": "vpcPublic1Subnet1Subnet5D6F39D9",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "vpcPublic1Subnet1RouteTable7C14485F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPublic1Subnet1RouteTableAssociation400008F9": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPublic1Subnet1RouteTable7C14485F",
        },
        "SubnetId": Object {
          "Ref": "vpcPublic1Subnet1Subnet5D6F39D9",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPublic1Subnet1Subnet5D6F39D9": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public1",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPublic1Subnet2DefaultRoute2904AD21": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcPublic1Subnet2RouteTable81717ECD",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPublic1Subnet2RouteTable81717ECD": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPublic1Subnet2RouteTableAssociation09520EA7": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPublic1Subnet2RouteTable81717ECD",
        },
        "SubnetId": Object {
          "Ref": "vpcPublic1Subnet2Subnet5379FFB9",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPublic1Subnet2Subnet5379FFB9": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public1",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public1Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPublic2Subnet1DefaultRouteF5AFAB24": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcPublic2Subnet1RouteTableE607AA0D",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPublic2Subnet1RouteTableAssociationDD1A74FC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPublic2Subnet1RouteTableE607AA0D",
        },
        "SubnetId": Object {
          "Ref": "vpcPublic2Subnet1Subnet83683B10",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPublic2Subnet1RouteTableE607AA0D": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public2Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPublic2Subnet1Subnet83683B10": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.2.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public2",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public2Subnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcPublic2Subnet2DefaultRoute1482A45B": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcPublic2Subnet2RouteTable879E0437",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcPublic2Subnet2RouteTable879E0437": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public2Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcPublic2Subnet2RouteTableAssociation5473B693": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcPublic2Subnet2RouteTable879E0437",
        },
        "SubnetId": Object {
          "Ref": "vpcPublic2Subnet2Subnet4094DFE0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcPublic2Subnet2Subnet4094DFE0": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "192.156.3.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public2",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "test/vpc/Public2Subnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcVPCGW7984C166": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
}
`;
